// Generated by CoffeeScript 1.9.1
(function() {
  var GithubApi, _, argv, exec, from_all_forks, from_cmd_args, from_file, fs, gitit, main;

  argv = require('minimist')(process.argv.slice(2));

  fs = require('fs');

  exec = require('child_process').exec;

  _ = require('lodash');

  GithubApi = require('github');

  from_file = (function(_this) {
    return function(repo, path) {
      return fs.readFile(path, function(err, data) {
        var users;
        users = data.toString().split("\n").slice(0, -1);
        return gitit(repo, users);
      });
    };
  })(this);

  from_all_forks = (function(_this) {
    return function(repo, user) {
      var github;
      github = new GithubApi({
        version: '3.0.0'
      });
      return github.repos.getForks({
        user: user,
        repo: repo
      }, function(err, res) {
        var fork, users;
        users = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = res.length; i < len; i++) {
            fork = res[i];
            results.push(fork.owner.login);
          }
          return results;
        })();
        return gitit(repo, users);
      });
    };
  })(this);

  from_cmd_args = (function(_this) {
    return function(repo, argv) {
      var users;
      users = argv['_'].slice(1);
      return gitit(repo, users);
    };
  })(this);

  gitit = (function(_this) {
    return function(repo, users) {
      return users.forEach(function(user) {
        return exec("git clone https://github.com/" + user + "/" + repo + ".git " + user, function(error, stdout, stderr) {
          return console.log(stdout);
        });
      });
    };
  })(this);

  main = (function(_this) {
    return function() {
      var repo;
      repo = argv['_'][0];
      if (argv.f !== void 0) {
        from_file(repo, argv.f);
      }
      if (argv.a !== void 0) {
        from_all_forks(repo, argv.a);
      }
      if (_.size(argv) === 1) {
        return from_cmd_args(repo, argv);
      }
    };
  })(this);

  main();

}).call(this);
